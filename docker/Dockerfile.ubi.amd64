FROM registry.access.redhat.com/ubi8/ubi-minimal:8.0

LABEL vendor="IBM"
LABEL summary="The secrets vault."
LABEL description="The vault manages secrets used by applications deployed to edge nodes."

# add license file
RUN mkdir -p /licenses
COPY LICENSE.txt /licenses

# This is the release of Vault to pull in and the key to verify the download.
ARG VAULT_VERSION
ARG VAULT_GPGKEY
ARG ARCH
ARG VAULT_PLUGIN_HASH

# Create a vault user and group first so the IDs get set the same way.

# Set up certificates, our base tools, and Vault.
RUN set -eux; \
    microdnf update -y; \
    microdnf install -y ca-certificates shadow-utils gnupg openssl libcap wget tzdata unzip tar && \
    found=''; \
    for server in \
        hkp://p80.pool.sks-keyservers.net:80 \
        hkp://keyserver.ubuntu.com:80 \
        hkp://pgp.mit.edu:80 \
    ; do \
        echo "Fetching GPG key $VAULT_GPGKEY from $server"; \
        gpg --batch --keyserver "$server" --recv-keys "$VAULT_GPGKEY" && found=yes && break; \
    done; \
    test -z "$found" && echo >&2 "error: failed to fetch GPG key $VAULT_GPGKEY" && exit 1; \
    mkdir -p /tmp/build && \
    cd /tmp/build && \
    wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_amd64 && \
    chmod +x /usr/local/bin/dumb-init && \
    wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_${ARCH}.zip && \
    wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS && \
    wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_SHA256SUMS.sig && \
    gpg --batch --verify vault_${VAULT_VERSION}_SHA256SUMS.sig vault_${VAULT_VERSION}_SHA256SUMS && \
    grep vault_${VAULT_VERSION}_linux_${ARCH}.zip vault_${VAULT_VERSION}_SHA256SUMS | sha256sum -c && \
    unzip -d /bin vault_${VAULT_VERSION}_linux_${ARCH}.zip && \
    cd /tmp && \
    rm -rf /tmp/build && \
    gpgconf --kill dirmngr && \
    gpgconf --kill gpg-agent  && \
    rm -rf /root/.gnupg  && \
    microdnf clean all

# /vault/logs is made available to use as a location to store audit logs
# /vault/file is made available to use as a location with the file storage backend
# the server will be started with /vault/config as the configuration directory so you can add additional config files in that location.
RUN groupadd -g 1000 vault && \
    useradd -rm -u 1000 -g vault vault
ENV VAULT_PLUGIN_HASH ${VAULT_PLUGIN_HASH}
ENV HOME /home/vault
RUN mkdir -p /vault/logs && \
    mkdir -p /vault/file && \
    mkdir -p /vault/config && \
    mkdir -p /vault/plugins && \
    mkdir -p /openhorizon/policy && \
    chown -R vault /vault && chown -R vault $HOME && chown -R vault /openhorizon && \
    chgrp -R 0 $HOME && chmod -R g+rwX $HOME && \
    chgrp -R 0 /vault && chmod -R g+rwX /vault && \
    chgrp -R 0 /openhorizon && chmod -R g+rwX /openhorizon


# Expose the logs directory as a volume since there's potentially long-running
# state in there
VOLUME /vault/logs

# Expose the file directory as a volume since there's potentially long-running
# state in there
VOLUME /vault/file

# 8200/tcp is the primary interface that applications use to interact with
# Vault.
EXPOSE 8200

# For production derivatives of this container, you shoud add the IPC_LOCK
# capability so that Vault can mlock memory.
RUN curl -4LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl && \
    chmod +x ./kubectl && \
    mv ./kubectl /usr/local/bin

COPY scripts/entrypoint.sh /usr/local/bin/entrypoint.sh
COPY scripts/auto-unseal.sh /usr/local/bin/auto-unseal.sh
COPY scripts/renewToken.sh /usr/local/bin/renewToken.sh

RUN chmod +x /usr/local/bin/entrypoint.sh && \
    chmod +x /usr/local/bin/auto-unseal.sh && \
    chmod +x /usr/local/bin/renewToken.sh

# The entry point script uses dumb-init as the top-level process to reap any
# zombie processes created by Vault sub-processes.
#
ENTRYPOINT ["entrypoint.sh"]

COPY bin/hznvaultauth /vault/plugins/hznvaultauth
COPY config/config.hcl /vault/config/config.hcl
COPY policy/agbot.acl.policy.hcl /openhorizon/policy/agbot.acl.policy.hcl

RUN chmod +x /vault/plugins/hznvaultauth

USER vault

# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
CMD ["server", "-dev"]
